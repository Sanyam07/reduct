import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

import plotly.graph_objs as go

import pandas as pd
from sklearn.decomposition import PCA

# read and parse data
df = pd.read_csv('data/testdata.csv')

# do PCA
num_pcs = df.shape[1]
pca = PCA(num_pcs)
transformed = pd.DataFrame(pca.fit_transform(df.as_matrix().transpose()))
pca_names = ["PCA{}".format(n) for n in range(1,num_pcs+1)]
transformed.columns = pca_names

pca_dropdown_values = [{'label':"{0} ({1:.3} of variance)".format(n,v), 'value':n}
                       for (n,v) in zip(pca_names,pca.explained_variance_ratio_)]

fields = list(df.columns)

app = dash.Dash()

app.layout = html.Div(children=[
    html.H1(children='Data embedding'),

    #html.Div(children='''
    #    Dash: A web application framework for Python.
    #'''),

    html.Label('X-axis'),
    dcc.Dropdown(
        id='x_dropdown',
        options = pca_dropdown_values,
        value='PCA1'
    ),

    html.Label('Y-axis'),
    dcc.Dropdown(
        id='y_dropdown',
        options = pca_dropdown_values,
        value='PCA2'
    ),

    dcc.Graph(
        id='pca-plot'  # No figure - will be generated by callback
    )
])

@app.callback(
    Output('pca-plot','figure'),
    [Input('x_dropdown','value'), Input('y_dropdown','value')]
)
def update_figure(x_field, y_field):
    figure = {
        'data': [
            go.Scatter(x=transformed[x_field], y=transformed[y_field], mode='markers',
                       marker=dict(size=10))
        ],
        'layout': {
            'title': 'PCA',
            'xaxis': {'title': x_field},
            'yaxis': {'title': y_field},
        }
    }
    return figure

if __name__ == '__main__':
    app.run_server(debug=True)
